
# ====================================================
# Config.conf File
# -------------------

# This file will help you set the variables for Odyssey's 5 main scripts. 
# Note that some of these variables may not need to be changed as they are already set to various programs' recommended defaults. 
	# Changing these variables are thus optional and labeled as: "(OPTIONAL)"
# However, some of these variables (such as reference paths, working directory, and GWAS and Imputation Project Names) must be set by the user for Odyssey to function
	# Changing these variables are thus required and labeled as: "(REQUIRED)"
# Variables are listed in order of appearance and also under the script they appear in (although some are referenced by future scripts)
	# In this way you may choose to fill out the variables a little at a time instead of all at once
	# If you choose to fill out the script little by little, make sure you do not run a script for which you have not filled out the necessary (REQUIRED) variables

# ====================================================




# ===========================================================================================================================================================================
# =================================================================== DataPrep Module Variables =============================================================================
# ===========================================================================================================================================================================

#Do you need to download the Reference Files? You only need to do this once (Boolean: T/F)
	# NOTE: As references are continually being updated you may want to check the links to make sure they are still current and/or the reference you desire
	DownloadRef="F";

#Execute STEP 1?: Converts your input Plink files to a BCF file (Boolean: T/F)
	DataPrepStep1="T";

#Execute STEP 2?: Aligns BCF File to the Reference Annotation and fixes coordinate errors and allele mismatches with BCFtools (Boolean: T/F)
	DataPrepStep2="T";

#Execute STEP 3?: Sorts the reference-aligned BCF output and convert it back into Plink format for phasing -- also removes positional duplicates if they exist (Boolean: T/F)
	DataPrepStep3="T";

#Save DataPrep Intermediate Files?: Saves all the intermediate files for troubleshooting purposes instead of deleting them (Boolean: T/F)
	# NOTE: Obviously if you are executing on a step-by-step basis, you should NOT remove the intermediate files	
	SaveDataPrepIntermeds="F"

# ===========================================================================================================================================================================
# ============================================================= Variables Used for More than 1 Script ======================================================================
# ===========================================================================================================================================================================

# Set Your Working Directory (i.e. specify where you put the Odyssey Folder on your system): (REQUIRED)
  # Please include a "/" on the end of your directory path as it will make the output syntax easier to read
	WorkingDir="/N/dc2/scratch/ryeller/Odyssey/";
		
# Enter Your Email to get Notifications from your HPC: (OPTIONAL)
	Email="ryeller@iupui.edu";	

# Does your system utilize Lustre Stripped Directories?
	# Lustre stripping helps the file directories on HPS to prevent from being filled by distributing the files between harddrives
	# This is a good practice to use if available since it prevents "drive-full" errors
	# If you don't know what this is or your system doesn't utilize this feature you can safely ignore this option
	# Boolean Specify (T/F):
		LustreStrip="T";
		
# Are you using a HPS (High Performance System) that utilizes a job handler?
	# If you specify "T" then a PBS header will be included on Phasing, Imputation, and GWAS analysis scripts
	# If you specify "F" then only a Bash shebang will be included on Phasing, Imputation, and GWAS analysis scripts 
		HPS_Submit="F";
		
# Maximum Memory Allocation
	# Many of the later steps (especially for the GWAS Project) use a larger amount of memory (in comparison to the Imputation Project Steps)
	# Specify the maximum memory allocation you can dedicate (this will be used to limit Plink's memory allocation and the amount of memory R will be allowed if executing on a HPS
	# 
	# Specify in terms of GB
		Max_Memory="24";
	
# ===========================================================================================================================================================================
# =================================================================== Imputation Project Variables ==========================================================================
# ===========================================================================================================================================================================

# Set Imputation Project Name: (REQUIRED)
  # This is the name that will identify the imputation project (by setting directory and file names) throughout the phasing and imputation processes
  # For example: "ImputationRun1"
  # NOTE: The Imputation Project Name must be a continuous string (i.e. do not include spaces)
	BaseName="HGDP952_Perform";

	
# ==================================================
#   1_ImputeProjectSetup-QC-Split Script Variables
# ==================================================

# Make sure only ONE PLink dataset is deposited in the "PLACE_NEW_PROJECT_TARGET_DATA_HERE" folder -- e.g. a .bed,.bim, and .fam
  # Data arising from the deposited file will henceforth be named as the BaseName you specified under the BaseName variable


# ==============================================
#   2_PhasingScriptMaker Variables
# ==============================================

# Number of Thread to Use for SHAPEIT Phasing: (OPTIONAL)
	PhasingThreads="5";

# Toggles whether the X chromosome (Chr23) is Phased by Shapeit:
  # NOTE: Pipeline assumes Plink chromosome nomenclature. So X chromosome should be listed as 23
  # Boolean Specify (T/F):
	PhaseX="T";

# Submit the Phasing scripts after you create them:
	# WARNING: Executes ALL Scripts that were just created in the Phasing Script Folder
	# Boolean Specify (T/F):
		ExecutePhasingScripts="T";

	
# ---------------------------
# Reference Dataset Section: (OPTIONAL - If Using Homo Sapien Data and Using the "Default" Reference Dataset -- https://mathgen.stats.ox.ac.uk/impute/1000GP_Phase3.html)
# ---------------------------
	# A Homo sapien reference dataset is used by SHAPEIT and IMPUTE2 and provided by the IMPUTE2 website
	# If you choose to use this reference dataset, you do not need to modify any of the following reference variables nor modify the reference dataset names
	# The reference dataset is based on 1000 Genomes haplotypes -- Phase 3 integrated variant set release in NCBI build 37 (hg19) coordinates (Updated 3 Aug 2015)
		# And was downloaded from https://mathgen.stats.ox.ac.uk/impute/1000GP_Phase3.html
	# If you choose to use your own reference data you may need to alter some of the following variables in addition to potentially renaming the reference dataset files

# ----------------------Start of Ref Variable Section------------------------------------------------------
	
# The Phasing and Impute Scripts search the Reference folder for hap, legend, and genetic map files by using an egrep (extended regex grep) non case-sensitive search
		
		# Genetic Map -- ./Reference directory is searched for a genetic map file: Filename must contain "map" and "chr[#]" in any order
			
		# Legend -- ./Reference directory is searched for a legend file: Filename must contain "chr[#]" and "legend" in any order

		# Hap -- ./Reference directory is searched for a hap file: Filename must contain "chr[#]" and "hap" in any order

		# X Chromosome Identifier -- .Reference directory is searched for the X chromosome map,legend, and hap file: 
			# Filenames will be searched based on the XChromIdentifier variable (specified below)
				# Files will be identified by searching for the XChromIdentifier and "map","legend", and "hap"
					# For example, if XChromIdentifier = "NONPAR" then Odyssey will search for the map file by looking for "NONPAR" and "map" in any order
			
			XChromIdentifier="NONPAR";

# ----------------------End of Ref Variable Section------------------------------------------------------
	

# ===========================================	
#   3a_ImputeScriptMaker Variables
# ===========================================

# Perform Error Analysis on Phasing Step
	# Will output the record of the the phased chromosomes who have 'error' or 'segmentation' errors output to their log files
	# Boolean Specify (T/F):	
		PhasingErrorAnalysis="T";

# Toggles whether the X chromosome (Chr23) is Imputed:
  # Boolean Specify (T/F):
	ImputeX="F";

# Control the Chromosome Batches of Imputation scripts that are created/executed:  (OPTIONAL)
	# Since some HPC's have limits on jobs submitted
		ImputeChrStart="10";
		ImputeChrEnd="22";

	
# Submit the Imputation scripts after you create them:
	# WARNING: Executes the scripts that were created in the Imputation Script Folder
	# Boolean Specify (T/F):
		ExecuteImputationScripts="T";
		
# ============================================
#  3b_ConcatConvert Variables
# ============================================

# Perform Error Analysis on Imputation Step.
	# Output record/s of imputed chromosomes who have 'error' or 'segmentation' errors noted in their log files
	# Boolean Specify (T/F):
		ImputationErrorAnalysis="F";

# Concatenate the chromosomal segment .gen files into a single chromosomal .gen
	# Boolean Specify (T/F):
		ConcatImpute="T";

# Analyze Imputation Quality Metrics (via a SNP Report)
	# Creates a SNP Report (.snpstat) that contains QC metrics, a SNP list (INFOFiltered_Chr[#].list) that contains variants that pass an INFO QC metric (specified below), and a log file (.snpstatOut)
		# Boolean Specify (T/F):		
			AnalyzeINFO="T";
	# Specify an IMPUTE INFO score threshold (this will be used to create a list of QC "accepted" imputed variants) (REQUIRED)
		# Set to "0" to keep everything
			FilterINFO="0.3"

# Convert the concatenated imputed .GEN into a .VCF:
	# File Conversion of IMPUTE Chromosomal Concatenated .gen File to VCF is Handled by PLINK 2.0
		# Boolean Specify (T/F):
			Convert2VCF="T";

# Use BCFTools to Merge/Concatenate the VCF Files Created by PLINK:
	# Once the data has been converted into a merged VCF you can either analyze the results in Plink or another analysis program (e.g. SNPTEST, GENABLE, etc.)
		# Boolean Specify (T/F):
			MergeVCF="T";
	# Number of Threads BCFTools should use to concatenate the Plink TEMP VCF Files to the Final VCF
		ConcatThreads="3";
		
# Cleanup Temporary Files -- this will remove many of the temporary files needed to make the final VCF
	# This saves a lot of space -- but intermediates may be useful for troubleshooting purposes
		KeepTemp="T";

			
		# --------------------- Parallel Processing Option ---------------------# 
		
		# If you have GNU Parallel Installed (or available as a HPS module like on our system) you can speed up considerably the concatenation and analysis process
		# But if you don't mind waiting a little longer then you can skip this section and concatenate in serial
	
			# If you are wanting to deal with the headaches of parallel processing then it is assumed that you know your way around configuring GNU-Parallel
			# For convenience GNU-Parallel may be loaded by modifying the "LOAD_PARALLEL" variable
			# For example GNU-Parallel is currently setup to load via a module since our HPS uses module (http://modules.sourceforge.net/man/module.html)
			# However, you could easily use the SET command to set an environment variable that is directed to the GNU-Parallel exec files via (e.g. SET PATH=%PATH%;/path/to/other/exec)
			# Or if you would like more control configuring to your system then you will need to modify 3b_ConcatenateSegments.sh
				# Since line numbers change with updates, I've placed a "GNU-Parallel Tag" that you can search for in a text browser to find the lines you that load GNU-Parallel in 3b_ConcatConvert.sh
					LOAD_PARALLEL="module load gnu-parallel";
				
		# Boolean Specify (T/F): (IF set to "F" then will run in Serial Mode)
			
		# Concatenate the .gen files in parallel
			ConcatParallel="T";
		# Analyze Imputation Quality Metrics (via a SNP Report) in parallel	
			AnalyzeINFOParallel="T";
		# Convert the concatenated imputed .GEN into a .VCF
			ConvertParallel="T";
			
						
		# --------------------- Parallel Processing Option ---------------------#


# ===========================================================================================================================================================================
# ====================================================================== GWAS Project Variables =============================================================================
# ===========================================================================================================================================================================

# Specify the GWAS Project Name: (REQUIRED)
	# This will be used to set the GWAS Project folder and filenames for identification throughout the GWAS
	# For example a Project name is "BlueEye_GWAS"
	# NOTE: Similar to the Imputation Project name, all GWAS Project Names must be a continuous string of characters (no spaces)
		GWASRunName="qLightBrown";

		
# Specify the Name of the PLINK formatted Phenotype File that should be placed in the following directory: ./Odyssey/GWAS/Phenotype/ (REQUIRED)
	Pheno_File="DummyPheno.txt";

	
# Specify the name of the phenotype you would like analyzed (this must match with the column name in the PLINK pheno file)
	GWASPhenoName="DummyPheno";
	

# Load the dosage VCF you would like analyzed
	# You may either specify the name of the Imputation Project that contains the data (the dosage VCF) you want analyzed...
		ImputationProject2Analyze="HGDP952_Perform";
	
	# Or you may override the default setting and specify the full path of the dosage VCF file you want analyzed
		# Boolean Specify (T/F):
			GWASOverride="F";
		# If you said yes to the override then input the full file path to the dosage VCF you want analyzed 
			ManualVCFInput="./Impute/HGDP952_Perform/ConcatImputation/2DONE_HGDP952_Perform_Merged.vcf.gz";

		# Load Sex information file with the dosage VCF
			# You will need to load a file that contains sex information for your samples
			# By default the fam file from the target directory in the Imputation Project is loaded alongside the dosage VCF
			# If you choose to do the GWASOverride above, then you will have to specify the path to the fam file that contains sex information
				ManualSexInput="/N/dc2/scratch/ryeller/Odyssey/Target/HGDP952_Perform/Ody1_HGDP952_Perform_Pre-ImputeQC2.fam";
	

# Specify the PLINK options you would like enacted for the GWAS: (REQUIRED)
	# If you must direct Plink to a file either use the full file path or give the path in relation to ./Odyssey (as it is the current working directory)
		PLINK_OPTIONS="--linear sex";


# Specify the number of the threads you intend to utilize for the GWAS analysis (OPTIONAL)
	GWAS_Threads="3";

	
# Submit the GWAS scripts after you create them: (REQUIRED)
	# WARNING: Executes Plink analysis and R visualization script that was created in the GWAS Project Analysis Folder
	# Boolean Specify (T/F):
		ExecuteGWASScripts="T";

	
	
	
	
	
	
	